# Gaussian elimination on matrix A, with partial pivoting
function ref!(A::Array{Float64,2})
    pivot!(A)
    m, n = size(A,)
    for i in 1:m
        for j in 1:(m-i)
            if abs(A[i+j,i]) > 0
                A[i+j,:] = (A[i,i]/A[i+j,i])*A[i+j,:] - A[i,:]
            end
        end
    end
    A
end


# Perform partial pivoting on matrix A
function pivot!(A::Array{Float64,2})
    for col in 1:size(A,2)-1
        # temp = vcat(zeros(col-1), abs.(A[col:end, col]))
        swap!(A, col, (col-1) + argmax(abs.(A[col:end, col])))
    end
end


# swap rows i and j of matrix A
function swap!(A::Array{Float64,2}, i::Int, j::Int)
    for k in 1:size(A,2)
        A[i,k], A[j,k] = A[j,k], A[i,k]
    end
end

A = [0 1 0 0; 1 0 3 0; -0.5 0 -0.2 1; -0.5 -0.3 1 0]

pivot!(A)

println(A)